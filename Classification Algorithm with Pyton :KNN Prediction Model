'''A small code snippet to perform KNN Classification on given dataset using Python Programming'''

Assumptions:
1. We use two data sets each representing a collection of coloured dots. One red dots and other Blue dots.
2. We have a new element ,lets say, an uncolored dot (yellow in ths case) that belongs to either of the groups.
3. Use of matplotlib and scipy.stats for KNN algorithm to perform Classification.

Goal:
To classify a new element into 2 available classes(datasets) namely red dots and blue dots '''
-----------------------------------------------------------------------------------------------------------------------------------------
import matplotlib.pyplot as plt
import scipy.stats as ss
import numpy as np

def knn_predicton(p,points,classes,k):
    ''' Function to predict outcome using KNN Model '''
    ind = k_nearest_neighbour(p,points,k)
    print(ind)
    print(classes)
    mode, count = ss.mstats.mode(classes[ind])  # To identify class to which maxium nearest neighbours belong
    return mode

def k_nearest_neighbour(p,points,k):
    ''' Function to find Nearest Neghbours '''
    distances = np.zeros(points.shape[0])
    print(distances)
    for i in range(len(distances)):
        distances[i]= np.sqrt(np.sum(np.power(p-points[i],2))) #distance(p,points[i])
    print(distances)
    sort_dis = np.argsort(distances)
    print(sort_dis)
    print(distances[sort_dis])
    return sort_dis[:k]  # return 1st k points nearest to the new element p

# Define Class of Blue dots and Class of Red Dots resp. i.e. two different datasets
points1 = np.array([[1.9,3.11],[1.1,2.9],[2.73,3],[2.05,1.5],[2,2],[2.1,3.77],[4.1,3.1],[4.34,2.93],[3,3]])
points2 = np.array([[1.95,1.88],[4.2,2.1],[2.5,3.2],[1.5,2.63],[1.15,2.12],[2.5,3.1],[2.5,1.2],[4.1,3.5],[1.5,3.1]])

# New element required to classify
p = np.array([2.1,3.4])

# Combining all the coordinates into one array using numbpy concatenate
points_set= np.concatenate((points1,points2),axis=0)
print(points_set)
classes = np.concatenate((np.zeros(points1.shape[0]),np.ones(points2.shape[0])),axis=0)
class_prediction = knn_predicton(p,points_set,classes,k=5)

# Print Final Prediction from the KNN model
if class_prediction == 1:
        print("The new element belongs to points 2: Red Dots")
else:
        print("The new element belongs to points 1: Blue Dots")


# Plotting the classes using matplotlib.pyplot - This is to confirm our result from above model
plt.plot(points1[:,0],points1[:,1],"bo")   # Dataset for Blue dots
plt.plot(points2[:,0],points2[:,1],"ro")   # Dataset for Red dots
plt.axis([-1.5,15.5,0.5,5.5])
plt.plot(p[0],p[1],"go")    # New element plotted in Green
plt.show()
